package spring.ExpCalc;
import java.text.NumberFormat;

// enum Burnin {
// 	MEGA,
// 	TERA,
// 	HYPER,
// 	NONE
// }

public class Maple{

	
	private static long[] XPTable = new long[]


			{0l,
			15l,
			34l,
			57l,
			92l,
			135l,
			372l,
			560l,
			840l,
			1242l,
			1242l,
			1242l,
			1242l,
			1242l,
			1242l,
			1490l,
			1788l,
			2145l,
			2574l,
			3088l,
			3705l,
			4446l,
			5335l,
			6402l,
			7682l,
			9218l,
			11061l,
			13273l,
			15927l,
			19112l,
			19112l,
			19112l,
			19112l,
			19112l,
			19112l,
			22934l,
			27520l,
			33024l,
			39628l,
			47553l,
			51357l,
			55465l,
			59902l,
			64694l,
			69869l,
			75458l,
			81494l,
			88013l,
			95054l,
			102658l,
			110870l,
			119739l,
			129318l,
			139663l,
			150836l,
			162902l,
			175934l,
			190008l,
			205208l,
			221624l,
			221624l,
			221624l,
			221624l,
			221624l,
			221624l,
			238245l,
			256113l,
			275321l,
			295970l,
			318167l,
			342029l,
			367681l,
			395257l,
			424901l,
			456768l,
			488741l,
			522952l,
			559558l,
			598727l,
			640637l,
			685481l,
			733464l,
			784806l,
			839742l,
			898523l,
			961419l,
			1028718l,
			1100728l,
			1177778l,
			1260222l,
			1342136l,
			1429374l,
			1522283l,
			1621231l,
			1726611l,
			1838840l,
			1958364l,
			2085657l,
			2221224l,
			2365603l,
			2365603l,
			2365603l,
			2365603l,
			2365603l,
			2365603l,
			2519367l,
			2683125l,
			2857528l,
			3043267l,
			3241079l,
			3451749l,
			3676112l,
			3915059l,
			4169537l,
			4440556l,
			4729192l,
			5036589l,
			5363967l,
			5712624l,
			6083944l,
			6479400l,
			6900561l,
			7349097l,
			7826788l,
			8335529l,
			8877338l,
			9454364l,
			10068897l,
			10723375l,
			11420394l,
			12162719l,
			12953295l,
			13795259l,
			14691950l,
			15646926l,
			16663976l,
			17747134l,
			18900697l,
			20129242l,
			21437642l,
			22777494l,
			24201087l,
			25713654l,
			27320757l,
			29028304l,
			30842573l,
			32770233l,
			34818372l,
			36994520l,
			39306677l,
			41763344l,
			44373553l,
			47146900l,
			50093581l,
			53224429l,
			56550955l,
			60085389l,
			63840725l,
			67830770l,
			72070193l,
			76574580l,
			81360491l,
			86445521l,
			91848366l,
			97588888l,
			103688193l,
			110168705l,
			117054249l,
			124370139l,
			132143272l,
			138750435l,
			145687956l,
			152972353l,
			160620970l,
			168652018l,
			177084618l,
			185938848l,
			195235790l,
			204997579l,
			215247457l,
			226009829l,
			237310320l,
			249175836l,
			261634627l,
			274716358l,
			288452175l,
			302874783l,
			318018522l,
			333919448l,
			350615420l,
			368146191l,
			386553500l,
			405881175l,
			426175233l,
			447483994l,
			469858193l,
			493351102l,
			518018657l,
			543919589l,
			571115568l,
			2207026470l,
			2471869646l,
			2768494003l,
			3100713283l,
			3472798876l,
			3889534741l,
			4356278909l,
			4879032378l,
			5464516263l,
			6120258214l,
			9792413142l,
			10869578587l,
			12065232231l,
			13392407776l,
			14865572631l,
			19325244420l,
			21064516417l,
			22960322894l,
			25026751954l,
			27279159629l,
			43646655406l,
			46701921284l,
			49971055773l,
			53469029677l,
			57211861754l,
			74375420280l,
			78094191294l,
			81998900858l,
			86098845900l,
			90403788195l,
			144646061112l,
			148985442945l,
			153455006233l,
			158058656419l,
			162800416111l,
			211640540944l,
			217989757172l,
			224529449887l,
			231265333383l,
			238203293384l,
			381125269414l,
			392559027496l,
			404335798320l,
			416465872269l,
			428959848437l,
			557647802968l,
			574377237057l,
			591608554168l,
			609356810793l,
			627637515116l,
			1004220024185l,
			1034346624910l,
			1065377023657l,
			1097338334366l,
			1130258484396l,
			1164166238927l,
			1199091226094l,
			1235063962876l,
			1272115881762l,
			1310279358214l,
			2902427248153l,
			2931451520634l,
			2960766035840l,
			2990373696198l,
			3020277433159l,
			3050480207490l,
			3080985009564l,
			3111794859659l,
			3142912808255l,
			3174341936337l,
			6412170711400l,
			6476292418514l,
			6541055342699l,
			6606465896125l,
			6672530555086l,
			13478511721273l,
			14826362893400l,
			16308999182740l,
			17939899101014l,
			19733889011115l,
			39862455802452l,
			43848701382697l,
			48233571520966l,
			53056928673062l,
			58362621540368l,
			117892495511543l,
			129681745062697l,
			142649919568966l,
			156914911525862l,
			172606402678448l,
			348664933410464l,
			383531426751510l,
			421884569426661l,
			464073026369327l,
			510480329006259l,
			1031170264592640l,
			1134287291051910l,
			1247716020157100l,
			1372487622172810l,
			2058731433259210l};
	
	public int stlvl;
	public int endlvl;
	public String type;
	public String exp;

	public int getstlvl() {
		return stlvl;
	}

	public void setstlvl(int stlvl) {
		this.stlvl = stlvl;
	}

	public int getendlvl() {
		return endlvl;
	}

	public void setendlvl(int endlvl) {
		this.endlvl = endlvl;
	}

	public String gettype() {
		return type;
	}

	public void settype(String type) {
		this.type = type;
	}

	public void setexp() {
		String a = NumberFormat.getNumberInstance()
						.format(getBurnXPRange(getstlvl(),getendlvl(),gettype())[1]);
		this.exp = a + " EXP" ;
	}

	public String getexp(){
		return exp;
	}


	static Number[] getBurnXPRange(int stlvl, int endlvl, String type) throws IndexOutOfBoundsException {
		long sum = 0;
		int i = 0;
		int burn;
		Number[] output = new Number[2];
		if (endlvl > 300 || stlvl <= 0) {
			throw new IndexOutOfBoundsException();
		}
		if(type.equals("MEGA")) {
			burn = 150;
		} else if(type.equals("TERA")) {
			burn = 200;
		} else if(type.equals("HYPER")){
			burn  = 250;
		} else{
			burn = 0;
		}
		for (i = stlvl; i < endlvl; i++) {
			if (i < 10) {
				sum += XPTable[i];
				continue;
			}
			if (i <= burn - 3) {
				sum += XPTable[i];
				i += 2;
				continue;
			} else if (i > burn - 3 && i < burn) {
				sum += XPTable[i];
				i = burn;
			} else {
				sum += XPTable[i];
			}
		}
		output[0] = i;
		output[1] = sum;
		return output;
	}
	

	
}
